// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/repository/shopping_store.go

// Package shopping_store_mock is a generated GoMock package.
package shopping_store_mock

import (
	context "context"
	model "podlodka/shopping_store/internal/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShoppingStore is a mock of ShoppingStore interface.
type MockShoppingStore struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingStoreMockRecorder
}

// MockShoppingStoreMockRecorder is the mock recorder for MockShoppingStore.
type MockShoppingStoreMockRecorder struct {
	mock *MockShoppingStore
}

// NewMockShoppingStore creates a new mock instance.
func NewMockShoppingStore(ctrl *gomock.Controller) *MockShoppingStore {
	mock := &MockShoppingStore{ctrl: ctrl}
	mock.recorder = &MockShoppingStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppingStore) EXPECT() *MockShoppingStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockShoppingStore) Delete(ctx context.Context, staff *model.ShoppingStore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, staff)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockShoppingStoreMockRecorder) Delete(ctx, staff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockShoppingStore)(nil).Delete), ctx, staff)
}

// GetByUserID mocks base method.
func (m *MockShoppingStore) GetByUserID(ctx context.Context, userID int64) ([]model.ShoppingStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.ShoppingStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockShoppingStoreMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockShoppingStore)(nil).GetByUserID), ctx, userID)
}

// Insert mocks base method.
func (m *MockShoppingStore) Insert(ctx context.Context, staff *model.ShoppingStore) (*model.ShoppingStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, staff)
	ret0, _ := ret[0].(*model.ShoppingStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockShoppingStoreMockRecorder) Insert(ctx, staff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockShoppingStore)(nil).Insert), ctx, staff)
}

// Update mocks base method.
func (m *MockShoppingStore) Update(ctx context.Context, staff *model.ShoppingStore) (*model.ShoppingStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, staff)
	ret0, _ := ret[0].(*model.ShoppingStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockShoppingStoreMockRecorder) Update(ctx, staff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockShoppingStore)(nil).Update), ctx, staff)
}
